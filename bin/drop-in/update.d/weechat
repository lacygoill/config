#!/bin/bash

# https://weechat.org/files/doc/weechat/stable/weechat_user.en.html#dependencies
readonly -a DEPENDENCIES=(
  'asciidoctor'
  'gettext'
  'libaspell-dev'
  'libcjson-dev'
  'libcurl4-gnutls-dev'
  'libgcrypt20-dev'
  'libgnutls28-dev'
  'libncurses-dev'
  'libzstd-dev'
  'python3-dev'
  'zlib1g-dev'
)

source "${0%/*}/_lib"
extract_archive 'weechat' 'https://github.com/weechat/weechat/releases'
install_dependencies "${DEPENDENCIES[@]}"

mkdir build
cd build || exit 1

# If we're  on master, upgrading  might break our config;  give us a  warning so
# that we have a chance to abort.
if command -v weechat >/dev/null \
    && [[ "$(weechat --version)" == *-dev ]]; then

  bold="$(tput bold)"
  underline="$(tput smul)"
  reset="$(tput sgr0)"

  tee >&2 <<EOF
Your current binary was compiled on master.
You should ${bold}not${reset} upgrade to the next ${bold}patch${reset} version (e.g. 1.2.3);
${bold}only${reset} to the next ${bold}minor${reset} one (e.g. 1.3) or ${bold}major${reset} one (e.g. 2.0).

Rationale: Your config might rely on a new feature/syntax which will only be
added in the next minor/major release.  Upgrading from 1.2.3 to 1.2.4 only
provides bug fixes.  Make sure your config does not rely on any feature/syntax
mentioned at the top of the changelog ("under dev"):
${underline}https://weechat.org/files/doc/weechat/ChangeLog-devel.html${reset}
For more info about WeeChat semantic versioning:
${underline}https://specs.weechat.org/specs/2023-003-practical-semantic-versioning.html#version-number${reset}

EOF

  PS3='Are you sure you want to upgrade? '
  readonly -a answers=('yes' 'no')
  select answer in "${answers[@]}"; do
    case $answer in
      yes) break ;;
      no) exit ;;
      *) printf 'expected an integer from 1 to %d\n' ${#answers[@]} ;;
    esac
  done
fi

# Do *not* set `WEECHAT_HOME`!{{{
#
#     ✘
#     -D WEECHAT_HOME:STRING="$HOME/.config/weechat" \
#
# It would  cause all  `${weechat_xxx_dir}` variables to  be evaluated  into the
# same thing at runtime:
#
#     ✘
#     /debug dirs
#     Directories:
#       home:
#         config: /home/lgc/.config/weechat
#         data: /home/lgc/.config/weechat
#         cache: /home/lgc/.config/weechat
#         runtime: /home/lgc/.config/weechat
#
# We want them to honor the XDG Base Directory Specifications:
#
#     ✔
#     /debug dirs
#     Directories:
#       home:
#         config: /home/lgc/.config/weechat
#         data: /home/lgc/.local/share/weechat
#         cache: /home/lgc/.cache/weechat
#         runtime: /run/user/1000/weechat
#
# See: https://specs.weechat.org/specs/2021-001-follow-xdg-base-dir-spec.html#weechat-home
#}}}
# If you want the online documentation, add these options:{{{
#
#     -D ENABLE_DOC:BOOL=ON \
#     -D ENABLE_DOC_INCOMPLETE:BOOL=ON \
#
# The doc should be in `~/.local/share/doc/weechat`
#}}}
# About the `relay` plugin:{{{
#
#    > The Relay plugin is used to relay data via network, using different protocols:
#    >
#    > irc: IRC proxy: used to share connections to IRC servers with one or many other IRC clients
#    >
#    > weechat: protocol used by remote interfaces to display and interact with WeeChat ...
#
# Source: https://weechat.org/files/doc/stable/weechat_user.en.html#relay
#}}}
# About the `typing` plugin:{{{
#
#    > The typing  plugin is used to  inform other users you are  typing messages and
#    > show a list of users currently typing a message on the buffer.
#
# Source: https://weechat.org/files/doc/stable/weechat_user.en.html#typing_notifications
#}}}

# Most of these options disable plugins to reduce memory consumption.
# https://weechat.org/files/doc/devel/weechat_user.en.html#build
if ! cmake -D CMAKE_INSTALL_PREFIX:PATH="$HOME/.local" \
      -D CMAKE_BUILD_TYPE:STRING=Release               \
      -D ENABLE_FIFO:BOOL=OFF                          \
      -D ENABLE_GUILE:BOOL=OFF                         \
      -D ENABLE_LUA:BOOL=OFF                           \
      -D ENABLE_MAN:BOOL=ON                            \
      -D ENABLE_PERL:BOOL=OFF                          \
      -D ENABLE_PHP:BOOL=OFF                           \
      -D ENABLE_RELAY:BOOL=OFF                         \
      -D ENABLE_RUBY:BOOL=OFF                          \
      -D ENABLE_SPELL:BOOL=OFF                         \
      -D ENABLE_TCL:BOOL=OFF                           \
      -D ENABLE_TYPING:BOOL=OFF                        \
      .. ; then
  exit 1
fi

make install \
  && set_app_as_mimetype_handler 'weechat'

# if it's the first time we install WeeChat, apply our custom config
if ! pidof -s weechat >/dev/null; then
  # WeeChat looks for its  scripts under `~/.local/share/weechat/python/`.  That
  # makes sense  for vendor scripts.   But we only  use our own  scripts located
  # under `~/.config/weechat/python/`.  Let's make sure WeeChat can find them.
  if ! [[ -L "$HOME/.local/share/weechat/python" ]]; then
    ln --symbolic "$HOME/.config/weechat/python" "$HOME/.local/share/weechat/python"
  fi
  rm --verbose "$HOME/.config/weechat/"*.conf
  weechat --no-connect --run-command='/exec -oc weechat-parse-config'
fi
