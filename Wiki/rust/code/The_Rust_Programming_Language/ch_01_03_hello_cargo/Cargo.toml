# This file was automatically generated by `$ cargo new hello_cargo`.
# Reference: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

# The first section in a Cargo.toml is [package].{{{
#
# The only fields required by Cargo are name and version.
# https://doc.rust-lang.org/cargo/reference/manifest.html#the-package-section
#}}}
[package]
# The package name is an identifier used to refer to the package.{{{
#
# It is used when listed as a  dependency in another package, and as the default
# name of inferred lib and bin targets.
#
# The name must use only alphanumeric characters or - or _, and cannot be empty.
#
# Note that `cargo new` and `cargo  init` impose some additional restrictions on
# the package name, such as enforcing that it is a valid Rust identifier and not
# a keyword.
#
# crates.io  imposes  even  more  restrictions, such  as  enforcing  only  ASCII
# characters, not a reserved name, not a  special Windows name such as "nul", is
# not too long, etc.
#
# https://doc.rust-lang.org/cargo/reference/manifest.html#the-name-field
#}}}
name = "ch_01_03_hello_cargo"
# Cargo bakes in the concept of Semantic Versioning, so make sure you follow some basic rules:{{{
#
# Use version numbers with three numeric parts such as 1.0.0 rather than 1.0.
#
# Before  you reach  1.0.0, anything  goes, but  if you  make breaking  changes,
# increment the minor version.  In  Rust, breaking changes include adding fields
# to structs or variants to enums.
#
# After 1.0.0, only make breaking changes  when you increment the major version.
# Don't break the build.
#
# After 1.0.0, don't add any new public API (no new pub anything) in patch-level
# versions.  Always increment the minor version  if you add any new pub structs,
# traits,  fields, types,  functions,  methods or  anything  else.  Use  version
# numbers with three numeric parts such as 1.0.0 rather than 1.0.
#
# For how  Cargo uses versions  to resolve  dependencies, and for  guidelines on
# setting your own version, see:
# https://doc.rust-lang.org/cargo/reference/resolver.html
#
# For more details on exactly what constitutes a breaking change, see:
# https://doc.rust-lang.org/cargo/reference/semver.html
#
# ---
#
# https://doc.rust-lang.org/cargo/reference/manifest.html#the-version-field
#}}}
version = "0.1.0"
# The optional authors field lists people or organizations that are considered the "authors" of the package.{{{
#
# The exact meaning  is open to interpretation  â€” it may list  the original or
# primary authors, current  maintainers, or owners of the  package.  An optional
# email address may be included within angled brackets at the end of each author
# entry.
#
# This field is  only surfaced in package metadata and  in the CARGO_PKG_AUTHORS
# environment variable  within build.rs.  It  is not displayed in  the crates.io
# user interface.
#
# Warning: Package manifests  cannot be  changed once  published, so  this field
# cannot be changed or removed in already-published versions of a package.
#
# https://doc.rust-lang.org/cargo/reference/manifest.html#the-authors-field
#}}}
authors = ["Lacygoill <lacygoill@lacygoill.me>"]
# This optional key affects which Rust Edition your package is compiled with.{{{
#
# Setting the  edition key in  [package] will  affect all targets/crates  in the
# package, including test suites, benchmarks, binaries, examples, etc.
#
# Most manifests have  the edition field filled in automatically  by `cargo new`
# with the latest stable edition.  By  default cargo new creates a manifest with
# the 2018 edition currently.
#
# If the edition  field is not present  in Cargo.toml, then the  2015 edition is
# assumed for  backwards compatibility.   Note that  all manifests  created with
# cargo new will not use this historical fallback because they will have edition
# explicitly specified to a newer value.
#
# https://doc.rust-lang.org/cargo/reference/manifest.html#the-edition-field
#}}}
edition = "2018"

# Your crates can depend on other  libraries from crates.io or other registries,
# git repositories, or subdirectories on your local filesystem.
# https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html
[dependencies]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
