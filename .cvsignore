# What's this file?{{{
#
# A global `.gitignore` for patterns matching  filenames we never want to track,
# no matter the project.
#}}}

# What's the default location for such a file?{{{
#
# Whatever path is held by `core.excludesfile`:
#
#     $ git config --global core.excludesfile
#
# By default, it should be:
#
#     ~/.config/git/ignore
#}}}
#   OK, so why do you use `~/.cvsignore` instead of this default path?{{{
#
# Other utilities  (like `rsync(1)`) might  expect to  find this file.   IOW, it
# provides compatibility advantages, because  it follows a well-known convention
# that has been used for a long time.
#}}}

# Some of your globs don't begin with a star.  Does Git add one automatically?{{{
#
# No.  If there's no star, it simply means we don't need one.
#
# Example:
#
#     .DS_Store
#
# This matches a file whose name is `.DS_Store`.
# A  file  named  `foo.DS_Store`  would  not  be  affected  by  this  glob,  and
# that's expected.   `.DS_Store` is a  file created automatically by  macOS, not
# `foo.DS_Store`.
#}}}
# Where did you find the code for all these sections?{{{
#
# https://github.com/github/gitignore/tree/master/Global
#}}}

# Warning: Avoid the negation of a directory!{{{
#
#        ✘
#      v---v
#      !dir/
#     ^
#     that's a no-break space (not a space)
#
# Otherwise, `rsync(1)` would give an error when it's passed `--cvs-exclude`:
#
#                                      again, that's a no-break space
#                                      v
#     '!' rule has trailing characters: !dir/
#     rsync error: syntax or usage error (code 1) at exclude.c(1323) [sender=3.1.3]
#
# BTW, `rsync --cvs-exclude ...` gives an error as soon as `!dir` appears at the
# start of a word;  even if it's in the middle of a  commented line.  That's why
# we had to write these no-break spaces.
#}}}
#   For this reason, don't ignore a `core` file dumped after a process has crashed.{{{
#
# You would  need another rule  to not ignore  a `core/` directory,  which would
# break `--csv-exclude` from `rsync(1)`.
#
# Anyway, a `core`  file should only be kept temporarily  to extract a backtrace
# from it; then it should be deleted.
#}}}

# Ansible {{{1

*.retry

# Archives {{{1

# It's better to unpack these files and commit the raw source because
# git has its own built in compression methods.
*.7z
*.jar
*.rar
*.zip
*.gz
*.tgz
*.bzip
*.bz2
*.xz
*.lzma
*.cab

# Packing-only formats
*.iso
*.tar

# Package management formats
*.dmg
*.xpi
*.gem
*.egg
*.deb
*.rpm
*.msi
*.msm
*.msp

# Backup {{{1

*.bak
*.gho
*.ori
*.orig
*.tmp

# Bazaar {{{1

.bzr/
.bzrignore

# Binaries {{{1

*.bin
bin/
build/

# CVS {{{1

/CVS/*
**/CVS/*
.cvsignore
*/.cvsignore

# Dropbox {{{1

# Dropbox settings and caches
.dropbox
.dropbox.attr
.dropbox.cache

# GPG {{{1

secring.*

# LibreOffice {{{1

# LibreOffice locks
.~lock.*#

# Linux {{{1

# temporary files which can be created if a process still has a handle open of a deleted file
.fuse_hidden*

# KDE directory preferences
.directory

# Linux trash folder which might appear on any partition or disk
.Trash-*

# .nfs files are created when an open file is removed but is still being accessed
.nfs*

# macOS {{{1

# General
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon

# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Python {{{1
# See also: https://github.com/github/gitignore/blob/master/Python.gitignore

.mypy_cache/
__pycache__/

# Rust {{{1
# https://github.com/github/gitignore/blob/master/Rust.gitignore

# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# Tags {{{1

# Ignore tags created by etags, ctags, gtags (GNU global) and cscope
TAGS
.TAGS
tags
.tags
gtags.files
GTAGS
GRTAGS
GPATH
GSYMS
cscope.files
cscope.out
cscope.in.out
cscope.po.out

# Vim {{{1

# Swap
[._]*.s[a-v][a-z]
[._]*.sw[a-p]
[._]s[a-rt-v][a-z]
[._]ss[a-gi-z]
[._]sw[a-p]

# Session
Session.vim

# Temporary
.netrwhist
*~

# Persistent undo
[._]*.un~

# Ignore some noisy files in our `unicode.vim` plugin:
#
#     ~/.vim/pack/vendor/opt/unicode.vim/autoload/unicode/
unicode.vim/

# Windows {{{1

# Windows thumbnail cache files
Thumbs.db
ehthumbs.db
ehthumbs_vista.db

# Dump file
*.stackdump

# Folder config file
[Dd]esktop.ini

# Recycle Bin used on file shares
$RECYCLE.BIN/

# Windows Installer files
*.msix

# Windows shortcuts
*.lnk
