# We append  `.conf` to the  name of this  file so that  it's not linted  by our
# `systemd-maintenance` script (which is run via a systemd timer).
#
# Indeed the latter runs:
#
#     find "$HOME/.config/etc/systemd/system/" \! -name '*.conf' -type f -print0 \
#                                              ^---------------^

# TODO: Get rid of `sxhkd(1)`.  Use your window manager.{{{
#
# We have had too many issues with this kind of program.
#
# ---
#
# For example, neither `xbindkeys(1)` nor `sxhkd(1)` can bind anything to `Super + m`.
# It's the only `Super+` chord with this issue.
# And it doesn't matter how the program  is started; as a systemd service or via
# the  desktop environment  (e.g.  in  XFCE: Settings >  Session  and Startup  >
# Application Autostart).
#
# We have to delay the program for a few seconds for it to work.
#
# ---
#
# `sxhkd(1)` works when installed from the official mirrors (v0.6.1).
# But not when compiled from source (v0.6.2).
#
# ---
#
# There exists `swhkd(1)` (a fork of `sxhkd(1)` which works on Wayland too).
# But last time I checked, it couldn't bind anything to *any* `Super+` chord.
# This config worked:
#
#     f1
#         firefox
#
# But not this one:
#
#     Super + w
#         firefox
#
# Worse, it didn't play nicely with `keyd(1)`.
# We had  to press the `keyd(1)`  panic sequence `BS+ESC+ENTER` to  control back
# the machine.
#
# There was also an issue where the keyboard repeat rate is reset:
# https://github.com/waycrate/swhkd/issues/76
#
# Overall, the project didn't look mature enough yet; it was only 6 months old.
#
# ---
#
# Some of its key bindings might be shadowed by the DE.
# For example, in XFCE, have a look at:
#
#     Settings > Keyboard > Application Shortcuts
#     Settings > Window Manager > Keyboard
#
# Debugging this kind of issue can be time-consuming.
#
# ---
#
# This suggests that this task should be handled by the window manager.  If your
# window manager does not have editable config files, use another one.
# Pick a lightweight DE with editable config files, and stick with it.
# Don't try to slap a new DE on top of an existing distro.
# Choose the right distro for the DE; try Lubuntu to get LXQT.
# In the long run, we'll probably end up with sway.
#
# Pros:
#
#    - works on Wayland
#    - editable config files
#    - tiling window manager (which is more powerful than a classical stacking one)
#    - supports many features
#      https://github.com/swaywm/sway/wiki
#
# Cons:
#
#    - maybe Wayland is not yet mature enough for our needs
#    - maybe Wayland/sway doesn't work well on a raspberry pi (or with Vim)
#    - `jumpapp(1)` doesn't work on Wayland
#      (though, maybe a tiling window manager makes such a tool useless)
#}}}
# TODO: Then, study `ydotool(1)`.{{{
#
# This is relevant to our work on making the keyboard less problematic.
# In particular, look at this fold:
#
#     # Don't use `xdotool(1)` either.
#
# In this file `~/.config/fish/functions/nv.fish`.
#
# ---
#
# Also, finish reviewing our notes with regard to `keyd(1)`:
#
#     ~/Wiki/keyboard/keyd.md
#}}}
# Wait.  Most (all?) of our issues came from systemd.
# This new link might be helpful:
# https://github.com/swaywm/sway/wiki/Systemd-integration#managing-user-applications-with-systemd
# If you end up using `sxhkd(1)` again, its config file needs to be here:
# `~/.config/sxhkd/sxhkdrc`

# If you want to use a hotkey daemon, prefer `sxhkd(1)` over `xbindkeys(1)`.{{{
#
# Its unit file is a bit simpler.
# Also, it's easier to restart across a logout/login.
# And its code  was maintained until 2 years ago,  while `xbindkeys(1)` does not
# seem to have been maintained since 2007 (judging by how old its man page is).
#
# ---
#
# Also,  `xbindkeys(1)` installs  an autostart  script which  you probably  need
# to  disable  (even  though  it  should  fail to  start  if  you  don't  create
# `~/.xbindkeysrc`):
#
#     Settings
#     > Session and Startup
#     > Application Autostart
#     > untick “xbindkeys (Start xbindkeys)”
#
# Otherwise, it might  interfere with how you  start up the program,  and if you
# try to start it via systemd, your  systemd journal will be polluted with error
# messages about `xbindkeys(1)` which doesn't find its config file.
#}}}
# Whatever tool you choose, do *not* start it via systemd.{{{
#
# It wouldn't survive across a logout/login.
# Besides, it might be tricky to find the right directives.
#
# ---
#
# You need to  make sure the launched  programs are not killed  when you restart
# the service:
#
#     KillMode=process
#
# Otherwise, any program you've launched via `xbindkeys(1)` & similar tools will
# be killed when the service is terminated (even temporarily during a restart).
#
# You might need to prevent the journal from being spammed:
#
#     StandardError=null
#
# For  example, without  this directive,  using `xbindkeys(1)`,  the journal  is
# filled with those entries:
#
#     xbindkeys[123456]: /usr/local/bin/jumpapp: line 276: printf: write error: Broken pipe
#
# One such entry is  logged every time you press one  of your `xbindkeys(1)` key
# bindings.
#
# With `xbindkeys(1)`, you need to set `DISPLAY`:
#
#     Environment="DISPLAY=:0.0"
#                          ^--^
#                          brittle hard-coded value
#
# And, you need to pass `--nodaemon` to the binary:
#
#     ExecStart=/usr/bin/xbindkeys --nodaemon --file %E/keyboard/xbindkeys.conf
#                                  ^--------^
#}}}
#   If you *really* want to start it with systemd, try something like this:{{{
#
# For `xbindkeys(1)`:
#
#     [Unit]
#     Description=a grabbing keys program for X
#     Documentation=man:xbindkeys(1)
#     StartLimitBurst=3
#     StartLimitInterval=60s
#
#     [Service]
#     ExecStart=/usr/bin/xbindkeys --nodaemon --file %E/keyboard/xbindkeys.conf
#     ExecStop=/usr/bin/kill -STOP $MAINPID
#     ExecReload=/usr/bin/kill -HUP $MAINPID
#     KillMode=process
#     Restart=always
#     RestartSec=2
#     StandardError=null
#
# For `sxhkd(1)`:
#
#     [Unit]
#     Description=Simple X Hotkey Daemon
#     Documentation=man:sxhkd(1)
#     StartLimitBurst=3
#     StartLimitInterval=60s
#
#     [Service]
#     ExecStart=/usr/bin/sxhkd
#     ExecReload=/usr/bin/kill -USR1 $MAINPID
#     KillMode=process
#     Restart=always
#     RestartSec=2
#     StandardError=null
#}}}

# TODO: Is this service entirely correct?{{{
#
# Should we assign something to `Restart`?
# What about `After`?  `BindsTo`?  `PartOf`?
#
# Have a look at:
#
#     /usr/share/doc/sxhkd/systemd/sxhkd.service
#
# It contains these directives:
#
#     BindsTo=display-manager.service
#     After=display-manager.service
#
# I tried to use  them, but I think then the service failed  to start because of
# some unsatisfied dependency.
#
# Note  that  `display-manager`  is  handled   by  the  system  instance,  while
# `sxhkd(1)`  is  handled  by  the  user  one.   Can  we  declare  a  dependency
# relationship between a user unit and a system one?
#}}}

[Unit]
Description=Simple X Hotkey Daemon
Documentation=man:sxhkd(1)

PartOf=graphical-session.target

StartLimitBurst=3
StartLimitInterval=60s

[Service]
Type=simple

ExecStart=/usr/bin/sxhkd
ExecReload=/usr/bin/kill -USR1 $MAINPID

KillMode=process

# TODO: Should we always set `RestartSec` after `Restart`?
# Maybe to avoid the `--user` journal being spammed with "Start request repeated
# too quickly." errors across logout/logins...
# If so, write a snippet (or update an existing one) to enforce this rule.
Restart=always
RestartSec=2

StandardError=null
